import java.util.Scanner;
import java.util.Arrays;
import java.util.Stack;
import java.util.Random;
import java.util.HashSet;


//No.1
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        int rows = 3;
        int cols = 4;
        double[][] matrix = new double[rows][cols];

        System.out.println("Enter a " + rows + "-by-" + cols + " matrix row by row:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = input.nextDouble();
            }
        }

        for (int j = 0; j < cols; j++) {
            System.out.println("Sum of the elements at column " + j + " is " + sumColumn(matrix, j));
        }
        input.close();
    }

    public static double sumColumn(double[][] m, int columnIndex) {
        double sum = 0;
        for (int i = 0; i < m.length; i++) {
            sum += m[i][columnIndex];
        }
        return sum;
    }
} */

//No.2
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int size = 4;
        double[][] matrix = new double[size][size];

        System.out.println("Enter a " + size + "-by-" + size + " matrix row by row:");
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                matrix[i][j] = input.nextDouble();
            }
        }
        System.out.println("Sum of the elements in the major diagonal is " + sumMajorDiagonal(matrix));
        input.close();
    }

    public static double sumMajorDiagonal(double[][] m) {
        double sum = 0;
        for (int i = 0; i < m.length; i++) {
            sum += m[i][i];
        }
        return sum;
    }
} */

//No.3
/*public class Main {
    public static void main(String[] args) {
        char[][] answers = {
            {'A', 'B', 'A', 'C', 'C', 'D', 'E', 'E', 'A', 'D'},
            {'D', 'B', 'A', 'B', 'C', 'A', 'E', 'E', 'A', 'D'},
            {'E', 'D', 'D', 'A', 'C', 'B', 'E', 'E', 'A', 'D'},
            {'C', 'B', 'A', 'E', 'D', 'C', 'E', 'E', 'A', 'D'},
            {'A', 'B', 'D', 'C', 'C', 'D', 'E', 'E', 'A', 'D'},
            {'B', 'B', 'E', 'C', 'C', 'D', 'E', 'E', 'A', 'D'},
            {'B', 'B', 'A', 'C', 'C', 'D', 'E', 'E', 'A', 'D'},
            {'E', 'B', 'E', 'C', 'C', 'D', 'E', 'E', 'A', 'D'}
        };
        char[] keys = {'D', 'B', 'D', 'C', 'C', 'D', 'A', 'E', 'A', 'D'};
        
        int[][] studentScores = new int[answers.length][2];
        
        for (int i = 0; i < answers.length; i++) {
            int correctCount = 0;
            for (int j = 0; j < answers[i].length; j++) {
                if (answers[i][j] == keys[j]) {
                    correctCount++;
                }
            }
            studentScores[i][0] = i;
            studentScores[i][1] = correctCount;
        }
        Arrays.sort(studentScores, (a, b) -> Integer.compare(a[1], b[1]));
        
        for (int i = 0; i < studentScores.length; i++) {
            System.out.println("Student " + studentScores[i][0] + "'s correct count is " + studentScores[i][1]);
        }
    }
} */

//No.4
/*public class Main {
    public static void main(String[] args) {
        int[][] workingHours = {
                {2, 4, 3, 4, 5, 8, 8},
                {7, 3, 4, 3, 3, 4, 4},
                {3, 3, 4, 3, 3, 2, 2},
                {9, 3, 4, 7, 3, 4, 1},
                {3, 5, 4, 3, 6, 3, 8},
                {3, 4, 4, 6, 3, 4, 4},
                {3, 7, 4, 8, 3, 8, 4},
                {6, 3, 5, 9, 2, 7, 9}
        };
        int[][] countOfWorkingHours = new int[workingHours.length][2];
        for (int i = 0; i < workingHours.length;i++) {
            countOfWorkingHours[i][0] = i;
            countOfWorkingHours[i][1] = sumOfHours(workingHours,i);
        }
        decreasingOrderBubbleSort(countOfWorkingHours);
        for (int[] e : countOfWorkingHours) {
            System.out.println("Worker " + e[0] + " got " + e[1] + "  hours.");
        }
    }
    public static void decreasingOrderBubbleSort(int[][] num) {
        for (int i = 0; i < num.length - 1; i++) {
            for (int j = 0; j < num.length - i - 1; j++) {
                if (num[j][1] > num[j + 1][1]) {
                    int[] temp = num[j];
                    num[j] = num[j + 1];
                    num[j + 1] = temp;
                }
            }
        }
    }
    public static int sumOfHours(int[][] hours,int employee) {
        int count = 0;
        for (int j = 0; j < hours[employee].length; j++) {
            count += hours[employee][j];
        }
        return count;
    }
} */

//No.5 and 6
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int size = 3; 
        double[][] matrix1 = new double[size][size];
        double[][] matrix2 = new double[size][size];
        
        System.out.println("Enter matrix1: ");
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                matrix1[i][j] = input.nextDouble();
            }
        }
        
        System.out.println("Enter matrix2: ");
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                matrix2[i][j] = input.nextDouble();
            }
        }
        
        double[][] sumMatrix = addMatrix(matrix1, matrix2);
        double[][] productMatrix = multiplyMatrix(matrix1, matrix2);
        
        System.out.println("The matrices are added as follows");
        printMatrix(sumMatrix);
        
        System.out.println("The matrices are multiplied as follows");
        printMatrix(productMatrix);
        
        input.close();
    }
    
    public static double[][] addMatrix(double[][] a, double[][] b) {
        int size = a.length;
        double[][] result = new double[size][size];
        
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                result[i][j] = a[i][j] + b[i][j];
            }
        }
        return result;
    }
    public static double[][] multiplyMatrix(double[][] a, double[][] b) {
        int size = a.length;
        double[][] result = new double[size][size];
        
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                for (int k = 0; k < size; k++) {
                    result[i][j] += a[i][k] * b[k][j];
                }
            }
        }
        return result;
    }
    
    public static void printMatrix(double[][] matrix) {
        for (double[] row : matrix) {
            for (double value : row) {
                System.out.print(value + " ");
            }
            System.out.println();
        }
    }
} */

//No.8
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter the number of points: ");
        int numPoints = input.nextInt();
        
        double[][] points = new double[numPoints][2];
        System.out.println("Enter " + numPoints + " points: ");
        for (int i = 0; i < numPoints; i++) {
            points[i][0] = input.nextDouble();
            points[i][1] = input.nextDouble();
        }
        
        int[][] closestPairs = findClosestPairs(points);
        double minDistance = distance(points[closestPairs[0][0]], points[closestPairs[0][1]]);
        
        for (int[] pair : closestPairs) {
            System.out.println("The closest two points are (" + points[pair[0]][0] + ", " + points[pair[0]][1] + ") and (" + points[pair[1]][0] + ", " + points[pair[1]][1] + ")");
        }
        System.out.println("Their distance is " + minDistance);
        input.close();
    }
    
    public static int[][] findClosestPairs(double[][] points) {
        double minDistance = Double.MAX_VALUE;
        int numPoints = points.length;
        int[][] tempPairs = new int[numPoints * numPoints][2];
        int count = 0;
        
        for (int i = 0; i < numPoints; i++) {
            for (int j = i + 1; j < numPoints; j++) {
                double distance = distance(points[i], points[j]);
                if (distance < minDistance) {
                    minDistance = distance;
                    count = 0;
                    tempPairs[count][0] = i;
                    tempPairs[count][1] = j;
                    count++;
                } else if (distance == minDistance) {
                    tempPairs[count][0] = i;
                    tempPairs[count][1] = j;
                    count++;
                }
            }
        }
        
        int[][] closestPairs = new int[count][2];
        System.arraycopy(tempPairs, 0, closestPairs, 0, count);
        return closestPairs;
    }
    
    public static double distance(double[] p1, double[] p2) {
        return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));
    }
} */

//No.10
/*public class Main {
    public static void main(String[] args) {
        int[][] matrix = new int[4][4];
        Random rand = new Random();

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                matrix[i][j] = rand.nextInt(2);
            }
        }

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }

        int maxRowIndex = 0;
        int maxRowCount = 0;
        for (int i = 0; i < 4; i++) {
            int count = 0;
            for (int j = 0; j < 4; j++) {
                if (matrix[i][j] == 1) {
                    count++;
                }
            }
            if (count > maxRowCount) {
                maxRowCount = count;
                maxRowIndex = i;
            }
        }

        int maxColIndex = 0;
        int maxColCount = 0;
        for (int j = 0; j < 4; j++) {
            int count = 0;
            for (int i = 0; i < 4; i++) {
                if (matrix[i][j] == 1) {
                    count++;
                }
            }
            if (count > maxColCount) {
                maxColCount = count;
                maxColIndex = j;
            }
        }
        
        System.out.println("The largest row index: " + maxRowIndex);
        System.out.println("The largest column index: " + maxColIndex);
    }
} */

//No.11
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter a number between 0 and 511: ");
        int number = input.nextInt();
        
        String binaryString = Integer.toBinaryString(number);
        binaryString = String.format("%9s", binaryString).replace(' ', '0');
        
        char[][] matrix = new char[3][3];
        int index = 0;
        
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                matrix[i][j] = (binaryString.charAt(index++) == '0') ? 'H' : 'T';
            }
        }
        
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
        
        input.close();
    }
} */

//No.12
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        double[] rates = {0.10, 0.15, 0.25, 0.28, 0.33, 0.35};
        int[][] brackets = {
            {8350, 33950, 82250, 171550, 372950}, // Single filer
            {16700, 67900, 137050, 208850, 372950}, // Married jointly
            {8350, 33950, 68525, 104425, 186475}, // Married separately
            {11950, 45500, 117450, 190200, 372950} // Head of household
        };
        
        System.out.print("Enter filing status (0-single, 1-married jointly, 2-married separately, 3-head of household): ");
        int status = input.nextInt();
        
        System.out.print("Enter taxable income: ");
        double income = input.nextDouble();
        
        double tax = computeTax(brackets, rates, status, income);
        
        System.out.println("Tax is " + tax);
        
        input.close();
    }
    
    public static double computeTax(int[][] brackets, double[] rates, int status, double income) {
        double tax = 0;
        int[] bracket = brackets[status];
        
        for (int i = 0; i < bracket.length; i++) {
            if (income <= bracket[i]) {
                tax += income * rates[i];
                break;
            } else {
                tax += (bracket[i] - (i == 0 ? 0 : bracket[i - 1])) * rates[i];
            }
        }
        
        if (income > bracket[bracket.length - 1]) {
            tax += (income - bracket[bracket.length - 1]) * rates[rates.length - 1];
        }
        
        return tax;
    }
} */

//No.13
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        System.out.print("Enter the number of rows and columns of the array: ");
        int rows = input.nextInt();
        int cols = input.nextInt();
        
        double[][] matrix = new double[rows][cols];
        System.out.println("Enter the array:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = input.nextDouble();
            }
        }
        
        int[] location = locateLargest(matrix);
        System.out.println("The location of the largest element is at (" + location[0] + ", " + location[1] + ")");
        input.close();
    }
    
    public static int[] locateLargest(double[][] a) {
        int[] location = {0, 0};
        double max = a[0][0];
        
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[i].length; j++) {
                if (a[i][j] > max) {
                    max = a[i][j];
                    location[0] = i;
                    location[1] = j;
                }
            }
        }
        
        return location;
    }
} */

//No.14
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        System.out.print("Enter the number of rows and columns of the array: ");
        int rows = input.nextInt();
        int cols = input.nextInt();
        
        double[][] matrix = new double[rows][cols];
        System.out.println("Enter the array:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = input.nextDouble();
            }
        }
        
        int[] location = locateLargest(matrix);
        System.out.println("The location of the largest element is at (" + location[0] + ", " + location[1] + ")");
        
        input.close();
    }
    
    public static int[] locateLargest(double[][] a) {
        int[] location = {0, 0};
        double max = a[0][0];
        
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[i].length; j++) {
                if (a[i][j] > max) {
                    max = a[i][j];
                    location[0] = i;
                    location[1] = j;
                }
            }
        }
        return location;
    }
} */

//No.15
/*public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double[][] points = new double[5][2];
        
        System.out.println("Enter five points:");
        for (int i = 0; i < 5; i++) {
            points[i][0] = scanner.nextDouble();
            points[i][1] = scanner.nextDouble();
        }
        
        scanner.close();
        
        if (sameLine(points)) {
            System.out.println("The five points are on the same line");
        } else {
            System.out.println("The five points are not on the same line");
        }
    }
    
    public static boolean sameLine(double[][] points) {
        for (int i = 2; i < points.length; i++) {
            if (!areCollinear(points[0], points[1], points[i])) {
                return false;
            }
        }
        return true;
    }
    
    private static boolean areCollinear(double[] p1, double[] p2, double[] p3) {
        return (p2[1] - p1[1]) * (p3[0] - p1[0]) == (p3[1] - p1[1]) * (p2[0] - p1[0]);
    }
} */

//No.16
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.println("Enter the number of rows:");
        int rows = input.nextInt();
        
        int[][] m = new int[rows][2]; 
        
        System.out.println("Enter the elements (each row with 2 values):");
        for (int i = 0; i < rows; i++) {
            m[i][0] = input.nextInt();
            m[i][1] = input.nextInt();
        }

        sort(m);

        System.out.println("Sorted 2D array:");
        for (int[] row : m) {
            System.out.println(Arrays.toString(row));
        }
        
        input.close();
    }
    public static void sort(int m[][]) {
        Arrays.sort(m, (a, b) -> {
            if (a[0] != b[0]) {
                return Integer.compare(a[0], b[0]);
            } else {
                return Integer.compare(a[1], b[1]); 
            }
        });
    }
} */

//No.18
/*public class Main {
    public static void main(String[] args) {
        int[][] m = {
            {1, 2}, 
            {3, 4}, 
            {5, 6}, 
            {7, 8}, 
            {9, 10}
        };

        System.out.println("Original Matrix:");
        printMatrix(m);

        shuffle(m);

        System.out.println("\nShuffled Matrix:");
        printMatrix(m);
    }

    public static void shuffle(int[][] m) {
        Random rand = new Random();
        for (int i = m.length - 1; i > 0; i--) {
            int j = rand.nextInt(i + 1);
            int[] temp = m[i];
            m[i] = m[j];
            m[j] = temp; 
        }
    }

    public static void printMatrix(int[][] m) {
        for (int[] row : m) {
            System.out.println(Arrays.toString(row));
        }
    }
} */

//No.21
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.print("Enter the number of cities: ");
        int n = input.nextInt();

        double[][] cities = new double[n][2];

        System.out.println("Enter the coordinates of the cities:");
        for (int i = 0; i < n; i++) {
            cities[i][0] = input.nextDouble();
            cities[i][1] = input.nextDouble(); 
        }

        int centralCityIndex = findCentralCity(cities);

        System.out.printf("The central city is at (%.1f, %.1f)\n", 
                          cities[centralCityIndex][0], cities[centralCityIndex][1]);
        System.out.printf("The total distance to all other cities is %.2f\n", 
                          totalDistance(cities, centralCityIndex));

        input.close();
    }

    public static int findCentralCity(double[][] cities) {
        int centralIndex = 0;
        double minDistance = Double.MAX_VALUE;

        for (int i = 0; i < cities.length; i++) {
            double totalDist = totalDistance(cities, i);
            if (totalDist < minDistance) {
                minDistance = totalDist;
                centralIndex = i;
            }
        }
        return centralIndex;
    }

    public static double totalDistance(double[][] cities, int index) {
        double total = 0;
        for (int i = 0; i < cities.length; i++) {
            if (i != index) {
                total += distance(cities[index][0], cities[index][1], 
                                  cities[i][0], cities[i][1]);
            }
        }
        return total;
    }

    public static double distance(double x1, double y1, double x2, double y2) {
        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    }
} */

//No.22
/*public class Main {
    public static void main(String[] args) {
        int[][] matrix = new int[6][6];

        fillMatrix(matrix);
        System.out.println("Generated 6x6 Matrix:");
        printMatrix(matrix);
        boolean isValid = checkEvenOnes(matrix);

        if (isValid) {
            System.out.println("\nEvery row and column have an even number of 1s.");
        } else {
            System.out.println("\nNot every row and column have an even number of 1s.");
        }
    }

    public static void fillMatrix(int[][] matrix) {
        Random rand = new Random();
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                matrix[i][j] = rand.nextInt(2);
            }
        }
    }

    public static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println();
        }
    }

    public static boolean checkEvenOnes(int[][] matrix) {

        for (int i = 0; i < matrix.length; i++) {
            if (!hasEvenOnes(matrix[i])) {
                return false;
            }
        }

        for (int j = 0; j < matrix[0].length; j++) {
            int count = 0;
            for (int i = 0; i < matrix.length; i++) {
                if (matrix[i][j] == 1) {
                    count++;
                }
            }
            if (count % 2 != 0) {
                return false; 
            }
        }

        return true;
    }
    public static boolean hasEvenOnes(int[] array) {
        int count = 0;
        for (int num : array) {
            if (num == 1) {
                count++;
            }
        }
        return count % 2 == 0;
    }
} */

//No.23
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        int[][] matrix = new int[6][6];

        System.out.println("Enter a 6-by-6 matrix row by row (0s and 1s):");
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 6; j++) {
                matrix[i][j] = input.nextInt();
            }
        }

        int flippedRow = findFlippedRow(matrix);
        int flippedCol = findFlippedColumn(matrix);

        System.out.println("The flipped cell is at (" + flippedRow + ", " + flippedCol + ")");

        input.close();
    }

    public static int findFlippedRow(int[][] matrix) {
        for (int i = 0; i < 6; i++) {
            if (countOnes(matrix[i]) % 2 != 0) {
                return i;
            }
        }
        return -1; 
    }

    public static int findFlippedColumn(int[][] matrix) {
        for (int j = 0; j < 6; j++) {
            int count = 0;
            for (int i = 0; i < 6; i++) {
                if (matrix[i][j] == 1) {
                    count++;
                }
            }
            if (count % 2 != 0) { 
                return j;
            }
        }
        return -1; 
    }

    public static int countOnes(int[] array) {
        int count = 0;
        for (int num : array) {
            if (num == 1) {
                count++;
            }
        }
        return count;
    }
} */

//No.24
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        int[][] grid = new int[9][9];
        System.out.println("Enter a Sudoku solution row by row:");
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                grid[i][j] = input.nextInt();
            }
        }
        if (isValidSudoku(grid)) {
            System.out.println("The solution is valid.");
        } else {
            System.out.println("The solution is invalid.");
        }
        input.close();
    }

    public static boolean isValidSudoku(int[][] grid) {
        for (int i = 0; i < 9; i++) {
            if (!isValidSet(grid[i]) || !isValidSet(getColumn(grid, i))) {
                return false;
            }
        }

        for (int row = 0; row < 9; row += 3) {
            for (int col = 0; col < 9; col += 3) {
                if (!isValidBox(grid, row, col)) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean isValidSet(int[] nums) {
        boolean[] seen = new boolean[10]; 
        for (int num : nums) {
            if (num < 1 || num > 9 || seen[num]) {
                return false;
            }
            seen[num] = true;
        }
        return true;
    }

    public static int[] getColumn(int[][] grid, int col) {
        int[] column = new int[9];
        for (int i = 0; i < 9; i++) {
            column[i] = grid[i][col];
        }
        return column;
    }

    public static boolean isValidBox(int[][] grid, int startRow, int startCol) {
        boolean[] seen = new boolean[10];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                int num = grid[startRow + i][startCol + j];
                if (num < 1 || num > 9 || seen[num]) {
                    return false;
                }
                seen[num] = true;
            }
        }
        return true;
    }
} */

//No.25
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double[][] matrix = new double[3][3];
        System.out.println("Enter a 3-by-3 matrix row by row:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                matrix[i][j] = input.nextDouble();
            }
        }

        if (isMarkovMatrix(matrix)) {
            System.out.println("It is a Markov matrix");
        } else {
            System.out.println("It is not a Markov matrix");
        }

        input.close();
    }

    public static boolean isMarkovMatrix(double[][] m) {
        for (int j = 0; j < m[0].length; j++) {
            double sum = 0;
            for (int i = 0; i < m.length; i++) {
                if (m[i][j] <= 0) { 
                    return false;
                }
                sum += m[i][j]; 
            }
            if (Math.abs(sum - 1.0) > 1e-9) {
                return false;
            }
        }
        return true;
    }
} */

//No.26
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double[][] matrix = new double[3][3];
        System.out.println("Enter a 3-by-3 matrix row by row:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                matrix[i][j] = input.nextDouble();
            }
        }
        double[][] sortedMatrix = sortRows(matrix);

        System.out.println("The row-sorted array is:");
        for (double[] row : sortedMatrix) {
            for (double num : row) {
                System.out.printf("%.3f ", num);
            }
            System.out.println();
        }
        input.close();
    }

    public static double[][] sortRows(double[][] m) {
        double[][] sorted = new double[m.length][m[0].length];

        for (int i = 0; i < m.length; i++) {
            sorted[i] = m[i].clone(); 
            Arrays.sort(sorted[i]);
        }
        return sorted;
    }
} */

//No.27
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        double[][] matrix = new double[3][3];
        System.out.println("Enter a 3-by-3 matrix row by row:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                matrix[i][j] = input.nextDouble();
            }
        }

        double[][] sortedMatrix = sortColumns(matrix);
        System.out.println("The column-sorted array is:");
        for (double[] row : sortedMatrix) {
            for (double num : row) {
                System.out.printf("%.4f ", num);
            }
            System.out.println();
        }

        input.close();
    }

    public static double[][] sortColumns(double[][] m) {
        int rows = m.length, cols = m[0].length;
        double[][] sorted = new double[rows][cols];

        for (int i = 0; i < rows; i++) {
            sorted[i] = m[i].clone();
        }

        for (int j = 0; j < cols; j++) {
            double[] column = new double[rows];

            for (int i = 0; i < rows; i++) {
                column[i] = sorted[i][j];
            }

            Arrays.sort(column);

            for (int i = 0; i < rows; i++) {
                sorted[i][j] = column[i];
            }
        }
        return sorted;
    }
} */

//No.28
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int[][] m1 = new int[3][3];
        System.out.println("Enter list1:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                m1[i][j] = input.nextInt();
            }
        }

        int[][] m2 = new int[3][3];
        System.out.println("Enter list2:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                m2[i][j] = input.nextInt();
            }
        }

        if (equals(m1, m2)) {
            System.out.println("The two arrays are strictly identical");
        } else {
            System.out.println("The two arrays are not strictly identical");
        }

        input.close();
    }
    public static boolean equals(int[][] m1, int[][] m2) {
        for (int i = 0; i < m1.length; i++) {
            for (int j = 0; j < m1[i].length; j++) {
                if (m1[i][j] != m2[i][j]) {
                    return false;
                }
            }
        }
        return true;
    }
} */

//No.29
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int[][] m1 = new int[3][3];
        System.out.println("Enter list1:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                m1[i][j] = input.nextInt();
            }
        }
        int[][] m2 = new int[3][3];
        System.out.println("Enter list2:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                m2[i][j] = input.nextInt();
            }
        }
        if (equals(m1, m2)) {
            System.out.println("The two arrays are identical");
        } else {
            System.out.println("The two arrays are not identical");
        }

        input.close();
    }

    public static boolean equals(int[][] m1, int[][] m2) {
        int[] arr1 = flattenAndSort(m1);
        int[] arr2 = flattenAndSort(m2);

        return Arrays.equals(arr1, arr2);
    }
    public static int[] flattenAndSort(int[][] matrix) {
        int size = matrix.length * matrix[0].length;
        int[] flattened = new int[size];

        int index = 0;
        for (int[] row : matrix) {
            for (int num : row) {
                flattened[index++] = num;
            }
        }
        Arrays.sort(flattened);
        return flattened;
    }
} */

//No.31
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        double[][] points = new double[4][2];
        System.out.println("Enter four points (x1 y1 x2 y2 x3 y3 x4 y4):");
        for (int i = 0; i < 4; i++) {
            points[i][0] = input.nextDouble();
            points[i][1] = input.nextDouble();
        }
        double[] intersection = getIntersectingPoint(points);

        if (intersection == null) {
            System.out.println("The two lines are parallel.");
        } else {
            System.out.printf("The intersecting point is at (%.5f, %.5f)\n", intersection[0], intersection[1]);
        }
        input.close();
    }
    public static double[] getIntersectingPoint(double[][] points) {

        double x1 = points[0][0], y1 = points[0][1];
        double x2 = points[1][0], y2 = points[1][1];
        double x3 = points[2][0], y3 = points[2][1];
        double x4 = points[3][0], y4 = points[3][1];

        double a1 = y1 - y2;
        double b1 = x2 - x1;
        double c1 = a1 * x1 + b1 * y1;
        
        double a2 = y3 - y4;
        double b2 = x4 - x3;
        double c2 = a2 * x3 + b2 * y3;

        double D = a1 * b2 - a2 * b1;

        if (D == 0) {
            return null;
        }
        double x = (c1 * b2 - c2 * b1) / D;
        double y = (a1 * c2 - a2 * c1) / D;
        return new double[]{x, y};
    }
} */

//No.32
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        double[][] points = new double[3][2];
        System.out.println("Enter x1, y1, x2, y2, x3, y3:");
        for (int i = 0; i < 3; i++) {
            points[i][0] = input.nextDouble();
            points[i][1] = input.nextDouble();
        }
        double area = getTriangleArea(points);

        if (area == 0) {
            System.out.println("The three points are on the same line.");
        } else {
            System.out.printf("The area of the triangle is %.2f\n", area);
        }
        input.close();
    }
    public static double getTriangleArea(double[][] points) {
        double x1 = points[0][0], y1 = points[0][1];
        double x2 = points[1][0], y2 = points[1][1];
        double x3 = points[2][0], y3 = points[2][1];

        double area = 0.5 * Math.abs(
                x1 * (y2 - y3) +
                x2 * (y3 - y1) +
                x3 * (y1 - y2)
        );
        return area;
    }
} */

//No.34
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        double[][] points = new double[6][2];
        System.out.println("Enter 6 points:");
        for (int i = 0; i < 6; i++) {
            points[i][0] = input.nextDouble(); 
            points[i][1] = input.nextDouble(); 
        }

        double[] rightmostLowest = getRightmostLowestPoint(points);
        System.out.printf("The rightmost lowest point is (%.1f, %.1f)\n",
                rightmostLowest[0], rightmostLowest[1]);

        input.close();
    }
    public static double[] getRightmostLowestPoint(double[][] points) {
        double[] lowestPoint = points[0];
        for (int i = 1; i < points.length; i++) {
            double x = points[i][0];
            double y = points[i][1];

            if (y < lowestPoint[1] || (y == lowestPoint[1] && x > lowestPoint[0])) {
                lowestPoint = points[i];
            }
        }
        return lowestPoint;
    }
} */

//No.35
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter the number of rows in the matrix: ");
        int n = input.nextInt();

        int[][] matrix = new int[n][n];
        System.out.println("Enter the matrix row by row:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = input.nextInt();
            }
        }
        int[] result = findLargestBlock(matrix);
        System.out.printf("The maximum square submatrix is at (%d, %d) with size %d\n",
                result[0], result[1], result[2]);

        input.close();
    }
    public static int[] findLargestBlock(int[][] m) {
        int n = m.length;
        int[][] dp = new int[n][n];
        int maxSize = 0, row = 0, col = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (m[i][j] == 1) {
                    if (i == 0 || j == 0) {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1])) + 1;
                    }
                    if (dp[i][j] > maxSize) {
                        maxSize = dp[i][j];
                        row = i - maxSize + 1;
                        col = j - maxSize + 1;
                    }
                }
            }
        }
        return new int[]{row, col, maxSize};
    }
} */

//No.36
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter number n: ");
        int n = input.nextInt();
        input.nextLine();
        char firstChar = 'A';
        char lastChar = (char) (firstChar + n - 1);
        char[][] matrix = new char[n][n];

        System.out.println("Enter " + n + " rows of letters separated by spaces:");
        for (int i = 0; i < n; i++) {
            String[] row = input.nextLine().split(" ");
            if (row.length != n) {
                System.out.println("Wrong input: Each row must contain " + n + " letters.");
                return;
            }
            for (int j = 0; j < n; j++) {
                char letter = row[j].charAt(0);
                if (letter < firstChar || letter > lastChar) {
                    System.out.println("Wrong input: the letters must be from " + firstChar + " to " + lastChar);
                    return;
                }
                matrix[i][j] = letter;
            }
        }

        if (isLatinSquare(matrix, n)) {
            System.out.println("The input array is a Latin square");
        } else {
            System.out.println("The input array is NOT a Latin square");
        }
        input.close();
    }
    public static boolean isLatinSquare(char[][] matrix, int n) {
        for (int i = 0; i < n; i++) {
            HashSet<Character> rowSet = new HashSet<>();
            for (int j = 0; j < n; j++) {
                if (!rowSet.add(matrix[i][j])) {
                    return false; 
                }
            }
        }
        for (int j = 0; j < n; j++) {
            HashSet<Character> colSet = new HashSet<>();
            for (int i = 0; i < n; i++) {
                if (!colSet.add(matrix[i][j])) {
                    return false;
                }
            }
        }
        return true;
    }
} */

//No.37
/*public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        String[][] statesAndCapitals = {
            {"Alabama", "Montgomery"}, {"Alaska", "Juneau"}, {"Arizona", "Phoenix"},
            {"Arkansas", "Little Rock"}, {"California", "Sacramento"}, {"Colorado", "Denver"},
            {"Connecticut", "Hartford"}, {"Delaware", "Dover"}, {"Florida", "Tallahassee"},
            {"Georgia", "Atlanta"}, {"Hawaii", "Honolulu"}, {"Idaho", "Boise"},
            {"Illinois", "Springfield"}, {"Indiana", "Indianapolis"}, {"Iowa", "Des Moines"},
            {"Kansas", "Topeka"}, {"Kentucky", "Frankfort"}, {"Louisiana", "Baton Rouge"},
            {"Maine", "Augusta"}, {"Maryland", "Annapolis"}, {"Massachusetts", "Boston"},
            {"Michigan", "Lansing"}, {"Minnesota", "Saint Paul"}, {"Mississippi", "Jackson"},
            {"Missouri", "Jefferson City"}, {"Montana", "Helena"}, {"Nebraska", "Lincoln"},
            {"Nevada", "Carson City"}, {"New Hampshire", "Concord"}, {"New Jersey", "Trenton"},
            {"New Mexico", "Santa Fe"}, {"New York", "Albany"}, {"North Carolina", "Raleigh"},
            {"North Dakota", "Bismarck"}, {"Ohio", "Columbus"}, {"Oklahoma", "Oklahoma City"},
            {"Oregon", "Salem"}, {"Pennsylvania", "Harrisburg"}, {"Rhode Island", "Providence"},
            {"South Carolina", "Columbia"}, {"South Dakota", "Pierre"}, {"Tennessee", "Nashville"},
            {"Texas", "Austin"}, {"Utah", "Salt Lake City"}, {"Vermont", "Montpelier"},
            {"Virginia", "Richmond"}, {"Washington", "Olympia"}, {"West Virginia", "Charleston"},
            {"Wisconsin", "Madison"}, {"Wyoming", "Cheyenne"}
        };
        int correctCount = 0;
        for (int i = 0; i < statesAndCapitals.length; i++) {
            System.out.print("What is the capital of " + statesAndCapitals[i][0] + "? ");
            String userAnswer = input.nextLine().trim();

            if (userAnswer.equalsIgnoreCase(statesAndCapitals[i][1])) {
                System.out.println("Your answer is correct!");
                correctCount++;
            } else {
                System.out.println("The correct answer should be " + statesAndCapitals[i][1]);
            }
        }
        System.out.println("The correct count is " + correctCount);
        input.close();
    }
} */




